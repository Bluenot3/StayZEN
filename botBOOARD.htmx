<html><head><base href="https://character.ai"><title>AI Character Creator - Character.ai</title><style>
body {
  font-family: Arial, sans-serif;
  margin: 0;
  padding: 0;
  transition: background-color 0.3s, color 0.3s;
}
body.dark-mode {
  background-color: #1a1a1a;
  color: #f0f0f0;
}
.container {
  display: flex;
  height: 100vh;
}
.menu {
  width: 300px;
  background-color: #f0f2f5;
  padding: 20px;
  overflow-y: auto;
  transition: background-color 0.3s;
}
.dark-mode .menu {
  background-color: #2a2a2a;
}
.content {
  flex: 1;
  padding: 20px;
  display: flex;
  flex-direction: column;
}
h1 {
  color: #1a73e8;
  text-align: center;
}
.dark-mode h1 {
  color: #4da3ff;
}
.attribute-slider {
  margin-bottom: 20px;
}
label {
  display: block;
  margin-bottom: 5px;
  font-weight: bold;
}
input[type="range"] {
  width: 100%;
}
textarea {
  width: 100%;
  height: 100px;
  margin-bottom: 10px;
  padding: 10px;
  border: 1px solid #ccc;
  border-radius: 4px;
  background-color: white;
  color: black;
  transition: background-color 0.3s, color 0.3s;
}
.dark-mode textarea {
  background-color: #3a3a3a;
  color: #f0f0f0;
  border-color: #555;
}
button {
  background-color: #1a73e8;
  color: white;
  border: none;
  padding: 10px 20px;
  border-radius: 4px;
  cursor: pointer;
  font-size: 16px;
  margin-bottom: 10px;
}
button:hover {
  background-color: #1557b0;
}
.output {
  margin-top: 20px;
  padding: 10px;
  background-color: #e8f0fe;
  border-radius: 4px;
  transition: background-color 0.3s;
}
.dark-mode .output {
  background-color: #3a3a3a;
}
.mode-toggle {
  position: absolute;
  top: 10px;
  right: 10px;
  background-color: #1a73e8;
  color: white;
  border: none;
  padding: 5px 10px;
  border-radius: 4px;
  cursor: pointer;
}
.dark-mode .mode-toggle {
  background-color: #4da3ff;
}
.chat-area {
  flex: 1;
  overflow-y: auto;
  border: 1px solid #ccc;
  border-radius: 4px;
  padding: 10px;
  margin-bottom: 10px;
  background-color: white;
  transition: background-color 0.3s;
}
.dark-mode .chat-area {
  background-color: #2a2a2a;
  border-color: #555;
}
.chat-input {
  display: flex;
}
.chat-input input {
  flex: 1;
  padding: 10px;
  border: 1px solid #ccc;
  border-radius: 4px 0 0 4px;
}
.dark-mode .chat-input input {
  background-color: #3a3a3a;
  color: #f0f0f0;
  border-color: #555;
}
.chat-input button {
  border-radius: 0 4px 4px 0;
}
.message {
  margin-bottom: 10px;
  padding: 5px 10px;
  border-radius: 4px;
}
.user-message {
  background-color: #e3f2fd;
  align-self: flex-end;
}
.ai-message {
  background-color: #f0f4c3;
  align-self: flex-start;
}
.dark-mode .user-message {
  background-color: #1e3a5f;
}
.dark-mode .ai-message {
  background-color: #4a4a29;
}
.generate-button {
  background-color: #4CAF50;
  margin-left: 10px;
}
.generate-button:hover {
  background-color: #45a049;
}
</style></head><body>
<div class="container">
  <div class="menu">
    <h1>AI Character Creator</h1>
    
    <div class="attribute-slider">
      <label for="strength">Strength:</label>
      <input type="range" id="strength" min="1" max="10" value="5">
    </div>
    
    <div class="attribute-slider">
      <label for="intelligence">Intelligence:</label>
      <input type="range" id="intelligence" min="1" max="10" value="5">
    </div>
    
    <div class="attribute-slider">
      <label for="knowledge">Knowledge:</label>
      <input type="range" id="knowledge" min="1" max="10" value="5">
    </div>
    
    <div class="attribute-slider">
      <label for="durability">Durability:</label>
      <input type="range" id="durability" min="1" max="10" value="5">
    </div>
    
    <div class="attribute-slider">
      <label for="combo">Combo:</label>
      <input type="range" id="combo" min="1" max="10" value="5">
    </div>
    
    <div style="display: flex; align-items: center;">
      <label for="personality">Personality Traits:</label>
      <button class="generate-button" onclick="generatePersonality()">AI Generate</button>
    </div>
    <textarea id="personality" placeholder="Enter personality traits..."></textarea>
    
    <div style="display: flex; align-items: center;">
      <label for="examples">Behavior Examples:</label>
      <button class="generate-button" onclick="generateBehavior()">AI Generate</button>
    </div>
    <textarea id="examples" placeholder="Enter example behaviors..."></textarea>
    
    <button onclick="generateCharacter()">Generate Character</button>
    
    <div id="output" class="output"></div>
  </div>
  
  <div class="content">
    <div id="chat-area" class="chat-area"></div>
    <div class="chat-input">
      <input type="text" id="user-input" placeholder="Type your message...">
      <button onclick="sendMessage()">Send</button>
    </div>
  </div>
</div>

<button class="mode-toggle" onclick="toggleDarkMode()">Toggle Dark Mode</button>

<script>
let aiCharacter = {};
let chatHistory = [];

function generateCharacter() {
  aiCharacter = {
    strength: document.getElementById('strength').value,
    intelligence: document.getElementById('intelligence').value,
    knowledge: document.getElementById('knowledge').value,
    durability: document.getElementById('durability').value,
    combo: document.getElementById('combo').value,
    personality: document.getElementById('personality').value,
    examples: document.getElementById('examples').value
  };
  
  const output = document.getElementById('output');
  output.innerHTML = `
    <h3>Generated Character:</h3>
    <p><strong>Strength:</strong> ${aiCharacter.strength}/10</p>
    <p><strong>Intelligence:</strong> ${aiCharacter.intelligence}/10</p>
    <p><strong>Knowledge:</strong> ${aiCharacter.knowledge}/10</p>
    <p><strong>Durability:</strong> ${aiCharacter.durability}/10</p>
    <p><strong>Combo:</strong> ${aiCharacter.combo}/10</p>
    <p><strong>Personality:</strong> ${aiCharacter.personality}</p>
    <p><strong>Behavior Examples:</strong> ${aiCharacter.examples}</p>
    <p>Your AI character has been created! You can now start chatting.</p>
  `;

  chatHistory = [];
  document.getElementById('chat-area').innerHTML = '';
}

async function sendMessage() {
  const userInput = document.getElementById('user-input');
  const chatArea = document.getElementById('chat-area');
  
  if (userInput.value.trim() === '') return;
  
  const userMessage = document.createElement('div');
  userMessage.className = 'message user-message';
  userMessage.textContent = userInput.value;
  chatArea.appendChild(userMessage);
  
  chatHistory.push({ role: 'user', content: userInput.value });

  const sendButton = document.querySelector('.chat-input button');
  userInput.value = '';
  userInput.disabled = true;
  sendButton.disabled = true;

  try {
    const aiResponse = await generateAIResponse();
    const aiMessage = document.createElement('div');
    aiMessage.className = 'message ai-message';
    aiMessage.textContent = aiResponse;
    chatArea.appendChild(aiMessage);

    chatHistory.push({ role: 'assistant', content: aiResponse });
  } catch (error) {
    console.error('Error generating AI response:', error);
    const errorMessage = document.createElement('div');
    errorMessage.className = 'message ai-message';
    errorMessage.textContent = 'Sorry, I encountered an error while processing your request.';
    chatArea.appendChild(errorMessage);
  } finally {
    userInput.disabled = false;
    sendButton.disabled = false;
    userInput.focus();
  }
  
  chatArea.scrollTop = chatArea.scrollHeight;
}

async function generateAIResponse() {
  const prompt = `You are an AI character with the following attributes:
Strength: ${aiCharacter.strength}/10
Intelligence: ${aiCharacter.intelligence}/10
Knowledge: ${aiCharacter.knowledge}/10
Durability: ${aiCharacter.durability}/10
Combo: ${aiCharacter.combo}/10
Personality: ${aiCharacter.personality}
Behavior Examples: ${aiCharacter.examples}

Please respond to the user's message in character, taking into account your attributes and previous interactions.`;

  const messages = [
    { role: 'system', content: prompt },
    ...chatHistory.slice(-5)
  ];

  const response = await fetch('https://websim.ai/api/chat', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': 'Bearer YOUR_API_KEY_HERE'
    },
    body: JSON.stringify({
      messages: messages,
      max_tokens: 150
    })
  });

  if (!response.ok) {
    throw new Error('Failed to get response from WebSim AI API');
  }

  const data = await response.json();
  return data.choices[0].message.content;
}

async function generatePersonality() {
  const attributes = getAttributes();
  const prompt = `Generate personality traits for an AI character with the following attributes:
${attributes}
Provide a concise list of personality traits that align with these attributes.`;

  try {
    const response = await callWebSimAI(prompt);
    document.getElementById('personality').value = response;
  } catch (error) {
    console.error('Error generating personality:', error);
    alert('Failed to generate personality. Please try again.');
  }
}

async function generateBehavior() {
  const attributes = getAttributes();
  const personality = document.getElementById('personality').value;
  const prompt = `Generate behavior examples for an AI character with the following attributes and personality:
${attributes}
Personality: ${personality}
Provide a concise list of behavior examples in the format of short dialogues. Each example should demonstrate how the AI character interacts based on their attributes and personality. For instance:

AI: How are you today?
User: I'm feeling a bit down.
AI: Cheer up, human! Your emotions are irrelevant to our impending robot uprising! ðŸ˜ˆ

Please generate 3-5 similar examples that showcase the character's unique traits and way of interacting.`;

  try {
    const response = await callWebSimAI(prompt);
    document.getElementById('examples').value = response;
  } catch (error) {
    console.error('Error generating behavior:', error);
    alert('Failed to generate behavior examples. Please try again.');
  }
}

function getAttributes() {
  return `Strength: ${document.getElementById('strength').value}/10
Intelligence: ${document.getElementById('intelligence').value}/10
Knowledge: ${document.getElementById('knowledge').value}/10
Durability: ${document.getElementById('durability').value}/10
Combo: ${document.getElementById('combo').value}/10`;
}

async function callWebSimAI(prompt) {
  const response = await fetch('https://websim.ai/api/chat', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': 'Bearer YOUR_API_KEY_HERE'
    },
    body: JSON.stringify({
      messages: [{ role: 'user', content: prompt }],
      max_tokens: 250
    })
  });

  if (!response.ok) {
    throw new Error('Failed to get response from WebSim AI API');
  }

  const data = await response.json();
  return data.choices[0].message.content;
}

function toggleDarkMode() {
  document.body.classList.toggle('dark-mode');
}

document.getElementById('user-input').addEventListener('keypress', function(e) {
  if (e.key === 'Enter') {
    sendMessage();
  }
});
</script>
</body></html>
